warn: 12/14/2024 11:07:30.120 CoreEventId.SensitiveDataLoggingEnabledWarning[10400] (Microsoft.EntityFrameworkCore.Infrastructure) 
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
dbug: 12/14/2024 11:07:30.178 CoreEventId.ContextInitialized[10403] (Microsoft.EntityFrameworkCore.Infrastructure) 
      Entity Framework Core 9.0.0 initialized 'NorthwindDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.0' with options: SensitiveDataLoggingEnabled DetailedErrorsEnabled 
dbug: 12/14/2024 11:07:30.196 CoreEventId.QueryCompilationStarting[10111] (Microsoft.EntityFrameworkCore.Query) 
      Compiling query expression: 
      'DbSet<Category>()
          .Include(c => c.Products
              .Where(p => (int?)p.Stock >= __stock_0))
          .Any()'
dbug: 12/14/2024 11:07:30.318 CoreEventId.QueryExecutionPlanned[10107] (Microsoft.EntityFrameworkCore.Query) 
      Generated query execution expression: 
      'queryContext => SingleQueryingEnumerable.Create<bool>(
          relationalQueryContext: (RelationalQueryContext)queryContext, 
          relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
              Projection Mapping:
                  EmptyProjectionMember -> 0
              SELECT EXISTS (
                  SELECT 1
                  FROM Categories AS c)) | Resolver: c => new RelationalCommandCache(
              c.Dependencies.MemoryCache, 
              c.RelationalDependencies.QuerySqlGeneratorFactory, 
              c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
              Projection Mapping:
                  EmptyProjectionMember -> 0
              SELECT EXISTS (
                  SELECT 1
                  FROM Categories AS c), 
              False, 
              new HashSet<string>(
                  new string[]{ }, 
                  StringComparer.Ordinal
              )
          )].GetRelationalCommandTemplate(parameters), 
          readerColumns: null, 
          shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
          {
              bool? value1;
              value1 = try { dataReader.IsDBNull(0) ? default(bool?) : (bool?)dataReader.GetBoolean(0) } catch (Exception) { ... } ;
              return (bool)value1;
          }, 
          contextType: Northwind.EntityModels.NorthwindDb, 
          standAloneStateManager: False, 
          detailedErrorsEnabled: True, 
          threadSafetyChecksEnabled: True)
          .Single()'
dbug: 12/14/2024 11:07:30.330 RelationalEventId.ConnectionCreating[20005] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Creating DbConnection.
dbug: 12/14/2024 11:07:30.338 RelationalEventId.ConnectionCreated[20006] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Created DbConnection. (6ms).
dbug: 12/14/2024 11:07:30.339 RelationalEventId.ConnectionOpening[20000] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opening connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.345 RelationalEventId.ConnectionOpened[20001] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opened connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.347 RelationalEventId.CommandCreating[20103] (Microsoft.EntityFrameworkCore.Database.Command) 
      Creating DbCommand for 'ExecuteReader'.
dbug: 12/14/2024 11:07:30.349 RelationalEventId.CommandCreated[20104] (Microsoft.EntityFrameworkCore.Database.Command) 
      Created DbCommand for 'ExecuteReader' (1ms).
dbug: 12/14/2024 11:07:30.350 RelationalEventId.CommandInitialized[20106] (Microsoft.EntityFrameworkCore.Database.Command) 
      Initialized DbCommand for 'ExecuteReader' (3ms).
dbug: 12/14/2024 11:07:30.352 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT EXISTS (
          SELECT 1
          FROM "Categories" AS "c")
info: 12/14/2024 11:07:30.365 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT EXISTS (
          SELECT 1
          FROM "Categories" AS "c")
dbug: 12/14/2024 11:07:30.367 RelationalEventId.DataReaderClosing[20301] (Microsoft.EntityFrameworkCore.Database.Command) 
      Closing data reader to 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.369 RelationalEventId.DataReaderDisposing[20300] (Microsoft.EntityFrameworkCore.Database.Command) 
      A data reader for 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' is being disposed after spending 2ms reading results.
dbug: 12/14/2024 11:07:30.370 RelationalEventId.ConnectionClosing[20002] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closing connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.372 RelationalEventId.ConnectionClosed[20003] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closed connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' (1ms).
dbug: 12/14/2024 11:07:30.373 CoreEventId.QueryCompilationStarting[10111] (Microsoft.EntityFrameworkCore.Query) 
      Compiling query expression: 
      'DbSet<Category>()
          .Include(c => c.Products
              .Where(p => (int?)p.Stock >= __stock_0))'
dbug: 12/14/2024 11:07:30.377 CoreEventId.NavigationBaseIncluded[10112] (Microsoft.EntityFrameworkCore.Query) 
      Including navigation: 'Category.Products'.
dbug: 12/14/2024 11:07:30.436 CoreEventId.QueryExecutionPlanned[10107] (Microsoft.EntityFrameworkCore.Query) 
      Generated query execution expression: 
      'queryContext => SingleQueryingEnumerable.Create<Category>(
          relationalQueryContext: (RelationalQueryContext)queryContext, 
          relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
              Client Projections:
                  0 -> Dictionary<IProperty, int> { [Property: Category.CategoryId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Category.CategoryName (string) Required MaxLength(15), 1], [Property: Category.Description (string), 2] }
                  1 -> 0
                  2 -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 3], [Property: Product.CategoryId (int) Required FK Index, 4], [Property: Product.Cost (decimal?), 5], [Property: Product.Discontinued (bool) Required, 6], [Property: Product.ProductName (string) Required MaxLength(40), 7], [Property: Product.Stock (short?), 8] }
                  3 -> 3
              SELECT c.CategoryId, c.CategoryName, c.Description, p0.ProductId, p0.CategoryId, p0.UnitPrice, p0.Discontinued, p0.ProductName, p0.UnitsInStock
              FROM Categories AS c
              LEFT JOIN 
              (
                  SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
                  FROM Products AS p
                  WHERE p.UnitsInStock >= @__stock_0
              ) AS p0 ON c.CategoryId == p0.CategoryId
              ORDER BY c.CategoryId ASC) | Resolver: c => new RelationalCommandCache(
              c.Dependencies.MemoryCache, 
              c.RelationalDependencies.QuerySqlGeneratorFactory, 
              c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
              Client Projections:
                  0 -> Dictionary<IProperty, int> { [Property: Category.CategoryId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Category.CategoryName (string) Required MaxLength(15), 1], [Property: Category.Description (string), 2] }
                  1 -> 0
                  2 -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 3], [Property: Product.CategoryId (int) Required FK Index, 4], [Property: Product.Cost (decimal?), 5], [Property: Product.Discontinued (bool) Required, 6], [Property: Product.ProductName (string) Required MaxLength(40), 7], [Property: Product.Stock (short?), 8] }
                  3 -> 3
              SELECT c.CategoryId, c.CategoryName, c.Description, p0.ProductId, p0.CategoryId, p0.UnitPrice, p0.Discontinued, p0.ProductName, p0.UnitsInStock
              FROM Categories AS c
              LEFT JOIN 
              (
                  SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
                  FROM Products AS p
                  WHERE p.UnitsInStock >= @__stock_0
              ) AS p0 ON c.CategoryId == p0.CategoryId
              ORDER BY c.CategoryId ASC, 
              False, 
              new HashSet<string>(
                  new string[]{ }, 
                  StringComparer.Ordinal
              )
          )].GetRelationalCommandTemplate(parameters), 
          readerColumns: null, 
          shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
          {
              resultContext.Values == null ? 
              {
                  Category entity;
                  entity = 
                  {
                      MaterializationContext materializationContext1;
                      IEntityType entityType1;
                      Category instance1;
                      InternalEntityEntry entry1;
                      bool hasNullKey1;
                      materializationContext1 = new MaterializationContext(
                          [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                          queryContext.Context
                      );
                      instance1 = default(Category);
                      entry1 = queryContext.TryGetEntry(
                          key: [LIFTABLE Constant: Key: Category.CategoryId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindPrimaryKey()], 
                          keyValues: new object[]{ try { (object)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                          throwOnNullKey: True, 
                          hasNullKey: hasNullKey1);
                      !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                      {
                          entityType1 = entry1.EntityType;
                          return instance1 = (Category)entry1.Entity;
                      } : 
                      {
                          ISnapshot shadowSnapshot1;
                          shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                          entityType1 = [LIFTABLE Constant: EntityType: Category | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category")];
                          instance1 = switch (entityType1)
                          {
                              case [LIFTABLE Constant: EntityType: Category | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category")]: 
                                  {
                                      return 
                                      {
                                          Category instance;
                                          instance = new Category();
                                          instance.<CategoryId>k__BackingField = try { dataReader.GetInt32(0) } catch (Exception) { ... } ;
                                          instance.<CategoryName>k__BackingField = try { dataReader.GetString(1) } catch (Exception) { ... } ;
                                          instance.<Description>k__BackingField = try { dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2) } catch (Exception) { ... } ;
                                          (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                              context: materializationContext1.Context, 
                                              entity: instance, 
                                              queryTrackingBehavior: TrackAll, 
                                              structuralType: [LIFTABLE Constant: EntityType: Category | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category")]) : default(void);
                                          return instance;
                                      }}
                              default: 
                                  default(Category)
                          }
                          ;
                          entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                              entityType: entityType1, 
                              entity: instance1, 
                              snapshot: shadowSnapshot1);
                          return instance1;
                      } : default(void);
                      return instance1;
                  };
                  resultContext.Values = new object[]{ entity };
                  ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Category, Category>(
                      collectionId: 0, 
                      queryContext: queryContext, 
                      dbDataReader: dataReader, 
                      resultCoordinator: resultCoordinator, 
                      entity: (Category)(resultContext.Values[0]), 
                      parentIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                      outerIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                      navigation: [LIFTABLE Constant: Navigation: Category.Products (ICollection<Product>) Collection ToDependent Product Inverse: Category | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindNavigation("Products")], 
                      clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Category, ICollection<Product>, Product> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindNavigation("Products").GetCollectionAccessor()], 
                      trackingQuery: True, 
                      setLoaded: True);
              } : default(void);
              ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Category, Product>(
                  collectionId: 0, 
                  queryContext: queryContext, 
                  dbDataReader: dataReader, 
                  resultCoordinator: resultCoordinator, 
                  parentIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                  outerIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                  selfIdentifier: (queryContext, dataReader) => new object[]{ (object)try { dataReader.IsDBNull(3) ? default(int?) : (int?)dataReader.GetInt32(3) } catch (Exception) { ... }  }, 
                  parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) }], 
                  outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) }], 
                  selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) }], 
                  innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                  {
                      Product entity;
                      entity = 
                      {
                          MaterializationContext materializationContext2;
                          IEntityType entityType2;
                          Product instance2;
                          InternalEntityEntry entry2;
                          bool hasNullKey2;
                          materializationContext2 = new MaterializationContext(
                              [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                              queryContext.Context
                          );
                          instance2 = default(Product);
                          entry2 = queryContext.TryGetEntry(
                              key: [LIFTABLE Constant: Key: Product.ProductId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindPrimaryKey()], 
                              keyValues: new object[]{ try { dataReader.IsDBNull(3) ? default(object) : (object)dataReader.GetInt32(3) } catch (Exception) { ... }  }, 
                              throwOnNullKey: False, 
                              hasNullKey: hasNullKey2);
                          !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                          {
                              entityType2 = entry2.EntityType;
                              return instance2 = (Product)entry2.Entity;
                          } : 
                          {
                              ISnapshot shadowSnapshot2;
                              shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                              entityType2 = [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")];
                              instance2 = switch (entityType2)
                              {
                                  case [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]: 
                                      {
                                          return 
                                          {
                                              Product instance;
                                              instance = new Product();
                                              instance.<ProductId>k__BackingField = try { dataReader.IsDBNull(3) ? default(int) : dataReader.GetInt32(3) } catch (Exception) { ... } ;
                                              instance.<CategoryId>k__BackingField = try { dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4) } catch (Exception) { ... } ;
                                              instance.<Cost>k__BackingField = try { dataReader.IsDBNull(5) ? default(decimal?) : (decimal?)Invoke(((CastingConverter<decimal, double>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Product.Cost (decimal?) | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindProperty("Cost")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetDouble(5)) } catch (Exception) { ... } ;
                                              instance.<Discontinued>k__BackingField = try { dataReader.IsDBNull(6) ? default(bool) : dataReader.GetBoolean(6) } catch (Exception) { ... } ;
                                              instance.<ProductName>k__BackingField = try { dataReader.IsDBNull(7) ? default(string) : dataReader.GetString(7) } catch (Exception) { ... } ;
                                              instance.<Stock>k__BackingField = try { dataReader.IsDBNull(8) ? default(short?) : (short?)dataReader.GetInt16(8) } catch (Exception) { ... } ;
                                              (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                  context: materializationContext2.Context, 
                                                  entity: instance, 
                                                  queryTrackingBehavior: TrackAll, 
                                                  structuralType: [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]) : default(void);
                                              return instance;
                                          }}
                                  default: 
                                      default(Product)
                              }
                              ;
                              entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                  entityType: entityType2, 
                                  entity: instance2, 
                                  snapshot: shadowSnapshot2);
                              return instance2;
                          } : default(void);
                          return instance2;
                      };
                      return entity;
                  }, 
                  inverseNavigation: [LIFTABLE Constant: Navigation: Product.Category (Category) ToPrincipal Category Inverse: Products | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindNavigation("Category")], 
                  fixup: (namelessParameter{10}, namelessParameter{11}) => 
                  {
                      [LIFTABLE Constant: ClrICollectionAccessor<Category, ICollection<Product>, Product> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindNavigation("Products").GetCollectionAccessor()].Add(
                          entity: namelessParameter{10}, 
                          value: namelessParameter{11}, 
                          forMaterialization: True);
                      return namelessParameter{11}.<Category>k__BackingField = namelessParameter{10};
                  }, 
                  trackingQuery: True);
              return IsTrue(resultCoordinator.ResultReady)
               ? (Category)(resultContext.Values[0]) : default(Category);
          }, 
          contextType: Northwind.EntityModels.NorthwindDb, 
          standAloneStateManager: False, 
          detailedErrorsEnabled: True, 
          threadSafetyChecksEnabled: True)'
dbug: 12/14/2024 11:07:30.444 CoreEventId.QueryCompilationStarting[10111] (Microsoft.EntityFrameworkCore.Query) 
      Compiling query expression: 
      'DbSet<Category>()
          .Include(c => c.Products
              .Where(p => (int?)p.Stock >= __stock_0))'
dbug: 12/14/2024 11:07:30.444 CoreEventId.NavigationBaseIncluded[10112] (Microsoft.EntityFrameworkCore.Query) 
      Including navigation: 'Category.Products'.
dbug: 12/14/2024 11:07:30.448 CoreEventId.QueryExecutionPlanned[10107] (Microsoft.EntityFrameworkCore.Query) 
      Generated query execution expression: 
      'queryContext => SingleQueryingEnumerable.Create<Category>(
          relationalQueryContext: (RelationalQueryContext)queryContext, 
          relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
              Client Projections:
                  0 -> Dictionary<IProperty, int> { [Property: Category.CategoryId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Category.CategoryName (string) Required MaxLength(15), 1], [Property: Category.Description (string), 2] }
                  1 -> 0
                  2 -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 3], [Property: Product.CategoryId (int) Required FK Index, 4], [Property: Product.Cost (decimal?), 5], [Property: Product.Discontinued (bool) Required, 6], [Property: Product.ProductName (string) Required MaxLength(40), 7], [Property: Product.Stock (short?), 8] }
                  3 -> 3
              SELECT c.CategoryId, c.CategoryName, c.Description, p0.ProductId, p0.CategoryId, p0.UnitPrice, p0.Discontinued, p0.ProductName, p0.UnitsInStock
              FROM Categories AS c
              LEFT JOIN 
              (
                  SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
                  FROM Products AS p
                  WHERE p.UnitsInStock >= @__stock_0
              ) AS p0 ON c.CategoryId == p0.CategoryId
              ORDER BY c.CategoryId ASC) | Resolver: c => new RelationalCommandCache(
              c.Dependencies.MemoryCache, 
              c.RelationalDependencies.QuerySqlGeneratorFactory, 
              c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
              Client Projections:
                  0 -> Dictionary<IProperty, int> { [Property: Category.CategoryId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Category.CategoryName (string) Required MaxLength(15), 1], [Property: Category.Description (string), 2] }
                  1 -> 0
                  2 -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 3], [Property: Product.CategoryId (int) Required FK Index, 4], [Property: Product.Cost (decimal?), 5], [Property: Product.Discontinued (bool) Required, 6], [Property: Product.ProductName (string) Required MaxLength(40), 7], [Property: Product.Stock (short?), 8] }
                  3 -> 3
              SELECT c.CategoryId, c.CategoryName, c.Description, p0.ProductId, p0.CategoryId, p0.UnitPrice, p0.Discontinued, p0.ProductName, p0.UnitsInStock
              FROM Categories AS c
              LEFT JOIN 
              (
                  SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
                  FROM Products AS p
                  WHERE p.UnitsInStock >= @__stock_0
              ) AS p0 ON c.CategoryId == p0.CategoryId
              ORDER BY c.CategoryId ASC, 
              False, 
              new HashSet<string>(
                  new string[]{ }, 
                  StringComparer.Ordinal
              )
          )].GetRelationalCommandTemplate(parameters), 
          readerColumns: null, 
          shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
          {
              resultContext.Values == null ? 
              {
                  Category entity;
                  entity = 
                  {
                      MaterializationContext materializationContext1;
                      IEntityType entityType1;
                      Category instance1;
                      InternalEntityEntry entry1;
                      bool hasNullKey1;
                      materializationContext1 = new MaterializationContext(
                          [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                          queryContext.Context
                      );
                      instance1 = default(Category);
                      entry1 = queryContext.TryGetEntry(
                          key: [LIFTABLE Constant: Key: Category.CategoryId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindPrimaryKey()], 
                          keyValues: new object[]{ try { (object)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                          throwOnNullKey: True, 
                          hasNullKey: hasNullKey1);
                      !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                      {
                          entityType1 = entry1.EntityType;
                          return instance1 = (Category)entry1.Entity;
                      } : 
                      {
                          ISnapshot shadowSnapshot1;
                          shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                          entityType1 = [LIFTABLE Constant: EntityType: Category | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category")];
                          instance1 = switch (entityType1)
                          {
                              case [LIFTABLE Constant: EntityType: Category | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category")]: 
                                  {
                                      return 
                                      {
                                          Category instance;
                                          instance = new Category();
                                          instance.<CategoryId>k__BackingField = try { dataReader.GetInt32(0) } catch (Exception) { ... } ;
                                          instance.<CategoryName>k__BackingField = try { dataReader.GetString(1) } catch (Exception) { ... } ;
                                          instance.<Description>k__BackingField = try { dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2) } catch (Exception) { ... } ;
                                          (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                              context: materializationContext1.Context, 
                                              entity: instance, 
                                              queryTrackingBehavior: TrackAll, 
                                              structuralType: [LIFTABLE Constant: EntityType: Category | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category")]) : default(void);
                                          return instance;
                                      }}
                              default: 
                                  default(Category)
                          }
                          ;
                          entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                              entityType: entityType1, 
                              entity: instance1, 
                              snapshot: shadowSnapshot1);
                          return instance1;
                      } : default(void);
                      return instance1;
                  };
                  resultContext.Values = new object[]{ entity };
                  ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Category, Category>(
                      collectionId: 0, 
                      queryContext: queryContext, 
                      dbDataReader: dataReader, 
                      resultCoordinator: resultCoordinator, 
                      entity: (Category)(resultContext.Values[0]), 
                      parentIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                      outerIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                      navigation: [LIFTABLE Constant: Navigation: Category.Products (ICollection<Product>) Collection ToDependent Product Inverse: Category | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindNavigation("Products")], 
                      clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Category, ICollection<Product>, Product> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindNavigation("Products").GetCollectionAccessor()], 
                      trackingQuery: True, 
                      setLoaded: True);
              } : default(void);
              ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Category, Product>(
                  collectionId: 0, 
                  queryContext: queryContext, 
                  dbDataReader: dataReader, 
                  resultCoordinator: resultCoordinator, 
                  parentIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                  outerIdentifier: (queryContext, dataReader) => new object[]{ (object)try { (int?)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                  selfIdentifier: (queryContext, dataReader) => new object[]{ (object)try { dataReader.IsDBNull(3) ? default(int?) : (int?)dataReader.GetInt32(3) } catch (Exception) { ... }  }, 
                  parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) }], 
                  outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) }], 
                  selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) }], 
                  innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                  {
                      Product entity;
                      entity = 
                      {
                          MaterializationContext materializationContext2;
                          IEntityType entityType2;
                          Product instance2;
                          InternalEntityEntry entry2;
                          bool hasNullKey2;
                          materializationContext2 = new MaterializationContext(
                              [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                              queryContext.Context
                          );
                          instance2 = default(Product);
                          entry2 = queryContext.TryGetEntry(
                              key: [LIFTABLE Constant: Key: Product.ProductId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindPrimaryKey()], 
                              keyValues: new object[]{ try { dataReader.IsDBNull(3) ? default(object) : (object)dataReader.GetInt32(3) } catch (Exception) { ... }  }, 
                              throwOnNullKey: False, 
                              hasNullKey: hasNullKey2);
                          !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                          {
                              entityType2 = entry2.EntityType;
                              return instance2 = (Product)entry2.Entity;
                          } : 
                          {
                              ISnapshot shadowSnapshot2;
                              shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                              entityType2 = [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")];
                              instance2 = switch (entityType2)
                              {
                                  case [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]: 
                                      {
                                          return 
                                          {
                                              Product instance;
                                              instance = new Product();
                                              instance.<ProductId>k__BackingField = try { dataReader.IsDBNull(3) ? default(int) : dataReader.GetInt32(3) } catch (Exception) { ... } ;
                                              instance.<CategoryId>k__BackingField = try { dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4) } catch (Exception) { ... } ;
                                              instance.<Cost>k__BackingField = try { dataReader.IsDBNull(5) ? default(decimal?) : (decimal?)Invoke(((CastingConverter<decimal, double>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Product.Cost (decimal?) | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindProperty("Cost")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetDouble(5)) } catch (Exception) { ... } ;
                                              instance.<Discontinued>k__BackingField = try { dataReader.IsDBNull(6) ? default(bool) : dataReader.GetBoolean(6) } catch (Exception) { ... } ;
                                              instance.<ProductName>k__BackingField = try { dataReader.IsDBNull(7) ? default(string) : dataReader.GetString(7) } catch (Exception) { ... } ;
                                              instance.<Stock>k__BackingField = try { dataReader.IsDBNull(8) ? default(short?) : (short?)dataReader.GetInt16(8) } catch (Exception) { ... } ;
                                              (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                  context: materializationContext2.Context, 
                                                  entity: instance, 
                                                  queryTrackingBehavior: TrackAll, 
                                                  structuralType: [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]) : default(void);
                                              return instance;
                                          }}
                                  default: 
                                      default(Product)
                              }
                              ;
                              entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                  entityType: entityType2, 
                                  entity: instance2, 
                                  snapshot: shadowSnapshot2);
                              return instance2;
                          } : default(void);
                          return instance2;
                      };
                      return entity;
                  }, 
                  inverseNavigation: [LIFTABLE Constant: Navigation: Product.Category (Category) ToPrincipal Category Inverse: Products | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindNavigation("Category")], 
                  fixup: (namelessParameter{10}, namelessParameter{11}) => 
                  {
                      [LIFTABLE Constant: ClrICollectionAccessor<Category, ICollection<Product>, Product> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Category").FindNavigation("Products").GetCollectionAccessor()].Add(
                          entity: namelessParameter{10}, 
                          value: namelessParameter{11}, 
                          forMaterialization: True);
                      return namelessParameter{11}.<Category>k__BackingField = namelessParameter{10};
                  }, 
                  trackingQuery: True);
              return IsTrue(resultCoordinator.ResultReady)
               ? (Category)(resultContext.Values[0]) : default(Category);
          }, 
          contextType: Northwind.EntityModels.NorthwindDb, 
          standAloneStateManager: False, 
          detailedErrorsEnabled: True, 
          threadSafetyChecksEnabled: True)'
dbug: 12/14/2024 11:07:30.451 RelationalEventId.ConnectionOpening[20000] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opening connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.451 RelationalEventId.ConnectionOpened[20001] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opened connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.451 RelationalEventId.CommandCreating[20103] (Microsoft.EntityFrameworkCore.Database.Command) 
      Creating DbCommand for 'ExecuteReader'.
dbug: 12/14/2024 11:07:30.451 RelationalEventId.CommandCreated[20104] (Microsoft.EntityFrameworkCore.Database.Command) 
      Created DbCommand for 'ExecuteReader' (0ms).
dbug: 12/14/2024 11:07:30.451 RelationalEventId.CommandInitialized[20106] (Microsoft.EntityFrameworkCore.Database.Command) 
      Initialized DbCommand for 'ExecuteReader' (0ms).
dbug: 12/14/2024 11:07:30.452 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executing DbCommand [Parameters=[@__stock_0='100' (Nullable = true) (DbType = Int16)], CommandType='Text', CommandTimeout='30']
      SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description", "p0"."ProductId", "p0"."CategoryId", "p0"."UnitPrice", "p0"."Discontinued", "p0"."ProductName", "p0"."UnitsInStock"
      FROM "Categories" AS "c"
      LEFT JOIN (
          SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"
          FROM "Products" AS "p"
          WHERE "p"."UnitsInStock" >= @__stock_0
      ) AS "p0" ON "c"."CategoryId" = "p0"."CategoryId"
      ORDER BY "c"."CategoryId"
info: 12/14/2024 11:07:30.454 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (2ms) [Parameters=[@__stock_0='100' (Nullable = true) (DbType = Int16)], CommandType='Text', CommandTimeout='30']
      SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description", "p0"."ProductId", "p0"."CategoryId", "p0"."UnitPrice", "p0"."Discontinued", "p0"."ProductName", "p0"."UnitsInStock"
      FROM "Categories" AS "c"
      LEFT JOIN (
          SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"
          FROM "Products" AS "p"
          WHERE "p"."UnitsInStock" >= @__stock_0
      ) AS "p0" ON "c"."CategoryId" = "p0"."CategoryId"
      ORDER BY "c"."CategoryId"
dbug: 12/14/2024 11:07:30.472 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 1}'.
dbug: 12/14/2024 11:07:30.491 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 34}'.
dbug: 12/14/2024 11:07:30.498 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 75}'.
dbug: 12/14/2024 11:07:30.500 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 2}'.
dbug: 12/14/2024 11:07:30.500 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 6}'.
dbug: 12/14/2024 11:07:30.500 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 61}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 3}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 4}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 33}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 5}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 22}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 6}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 55}'.
dbug: 12/14/2024 11:07:30.501 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 7}'.
dbug: 12/14/2024 11:07:30.502 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Category' entity with key '{CategoryId: 8}'.
dbug: 12/14/2024 11:07:30.502 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 36}'.
dbug: 12/14/2024 11:07:30.502 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 40}'.
dbug: 12/14/2024 11:07:30.502 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 73}'.
dbug: 12/14/2024 11:07:30.502 RelationalEventId.DataReaderClosing[20301] (Microsoft.EntityFrameworkCore.Database.Command) 
      Closing data reader to 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.502 RelationalEventId.DataReaderDisposing[20300] (Microsoft.EntityFrameworkCore.Database.Command) 
      A data reader for 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' is being disposed after spending 47ms reading results.
dbug: 12/14/2024 11:07:30.502 RelationalEventId.ConnectionClosing[20002] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closing connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.502 RelationalEventId.ConnectionClosed[20003] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closed connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' (0ms).
dbug: 12/14/2024 11:07:30.503 CoreEventId.ContextDisposed[10407] (Microsoft.EntityFrameworkCore.Infrastructure) 
      'NorthwindDb' disposed.
dbug: 12/14/2024 11:07:30.504 RelationalEventId.ConnectionDisposing[20007] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Disposing connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:30.504 RelationalEventId.ConnectionDisposed[20008] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Disposed connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' (0ms).
dbug: 12/14/2024 11:07:31.344 CoreEventId.ContextInitialized[10403] (Microsoft.EntityFrameworkCore.Infrastructure) 
      Entity Framework Core 9.0.0 initialized 'NorthwindDb' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.0' with options: SensitiveDataLoggingEnabled DetailedErrorsEnabled 
dbug: 12/14/2024 11:07:31.345 CoreEventId.QueryCompilationStarting[10111] (Microsoft.EntityFrameworkCore.Query) 
      Compiling query expression: 
      'DbSet<Product>()
          .Where(product => product.Cost > __price_0)
          .OrderByDescending(product => product.Cost)
          .Any()'
dbug: 12/14/2024 11:07:31.348 CoreEventId.QueryExecutionPlanned[10107] (Microsoft.EntityFrameworkCore.Query) 
      Generated query execution expression: 
      'queryContext => SingleQueryingEnumerable.Create<bool>(
          relationalQueryContext: (RelationalQueryContext)queryContext, 
          relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
              Projection Mapping:
                  EmptyProjectionMember -> 0
              SELECT EXISTS (
                  SELECT 1
                  FROM Products AS p
                  WHERE p.UnitPrice > @__price_0)) | Resolver: c => new RelationalCommandCache(
              c.Dependencies.MemoryCache, 
              c.RelationalDependencies.QuerySqlGeneratorFactory, 
              c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
              Projection Mapping:
                  EmptyProjectionMember -> 0
              SELECT EXISTS (
                  SELECT 1
                  FROM Products AS p
                  WHERE p.UnitPrice > @__price_0), 
              False, 
              new HashSet<string>(
                  new string[]{ }, 
                  StringComparer.Ordinal
              )
          )].GetRelationalCommandTemplate(parameters), 
          readerColumns: null, 
          shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
          {
              bool? value1;
              value1 = try { dataReader.IsDBNull(0) ? default(bool?) : (bool?)dataReader.GetBoolean(0) } catch (Exception) { ... } ;
              return (bool)value1;
          }, 
          contextType: Northwind.EntityModels.NorthwindDb, 
          standAloneStateManager: False, 
          detailedErrorsEnabled: True, 
          threadSafetyChecksEnabled: True)
          .Single()'
dbug: 12/14/2024 11:07:31.348 RelationalEventId.ConnectionCreating[20005] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Creating DbConnection.
dbug: 12/14/2024 11:07:31.348 RelationalEventId.ConnectionCreated[20006] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Created DbConnection. (0ms).
dbug: 12/14/2024 11:07:31.348 RelationalEventId.ConnectionOpening[20000] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opening connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.348 RelationalEventId.ConnectionOpened[20001] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opened connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.348 RelationalEventId.CommandCreating[20103] (Microsoft.EntityFrameworkCore.Database.Command) 
      Creating DbCommand for 'ExecuteReader'.
dbug: 12/14/2024 11:07:31.348 RelationalEventId.CommandCreated[20104] (Microsoft.EntityFrameworkCore.Database.Command) 
      Created DbCommand for 'ExecuteReader' (0ms).
dbug: 12/14/2024 11:07:31.349 RelationalEventId.CommandInitialized[20106] (Microsoft.EntityFrameworkCore.Database.Command) 
      Initialized DbCommand for 'ExecuteReader' (0ms).
dbug: 12/14/2024 11:07:31.351 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executing DbCommand [Parameters=[@__price_0='100' (Nullable = true)], CommandType='Text', CommandTimeout='30']
      SELECT EXISTS (
          SELECT 1
          FROM "Products" AS "p"
          WHERE "p"."UnitPrice" > @__price_0)
info: 12/14/2024 11:07:31.352 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (3ms) [Parameters=[@__price_0='100' (Nullable = true)], CommandType='Text', CommandTimeout='30']
      SELECT EXISTS (
          SELECT 1
          FROM "Products" AS "p"
          WHERE "p"."UnitPrice" > @__price_0)
dbug: 12/14/2024 11:07:31.352 RelationalEventId.DataReaderClosing[20301] (Microsoft.EntityFrameworkCore.Database.Command) 
      Closing data reader to 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.352 RelationalEventId.DataReaderDisposing[20300] (Microsoft.EntityFrameworkCore.Database.Command) 
      A data reader for 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' is being disposed after spending 0ms reading results.
dbug: 12/14/2024 11:07:31.352 RelationalEventId.ConnectionClosing[20002] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closing connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.352 RelationalEventId.ConnectionClosed[20003] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closed connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db' (0ms).
dbug: 12/14/2024 11:07:31.352 CoreEventId.QueryCompilationStarting[10111] (Microsoft.EntityFrameworkCore.Query) 
      Compiling query expression: 
      'DbSet<Product>()
          .Where(product => product.Cost > __price_0)
          .OrderByDescending(product => product.Cost)'
dbug: 12/14/2024 11:07:31.355 CoreEventId.QueryExecutionPlanned[10107] (Microsoft.EntityFrameworkCore.Query) 
      Generated query execution expression: 
      'queryContext => SingleQueryingEnumerable.Create<Product>(
          relationalQueryContext: (RelationalQueryContext)queryContext, 
          relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
              Projection Mapping:
                  EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Product.CategoryId (int) Required FK Index, 1], [Property: Product.Cost (decimal?), 2], [Property: Product.Discontinued (bool) Required, 3], [Property: Product.ProductName (string) Required MaxLength(40), 4], [Property: Product.Stock (short?), 5] }
              SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
              FROM Products AS p
              WHERE p.UnitPrice > @__price_0
              ORDER BY p.UnitPrice DESC) | Resolver: c => new RelationalCommandCache(
              c.Dependencies.MemoryCache, 
              c.RelationalDependencies.QuerySqlGeneratorFactory, 
              c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
              Projection Mapping:
                  EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Product.CategoryId (int) Required FK Index, 1], [Property: Product.Cost (decimal?), 2], [Property: Product.Discontinued (bool) Required, 3], [Property: Product.ProductName (string) Required MaxLength(40), 4], [Property: Product.Stock (short?), 5] }
              SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
              FROM Products AS p
              WHERE p.UnitPrice > @__price_0
              ORDER BY p.UnitPrice DESC, 
              False, 
              new HashSet<string>(
                  new string[]{ }, 
                  StringComparer.Ordinal
              )
          )].GetRelationalCommandTemplate(parameters), 
          readerColumns: null, 
          shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
          {
              Product entity;
              entity = 
              {
                  MaterializationContext materializationContext1;
                  IEntityType entityType1;
                  Product instance1;
                  InternalEntityEntry entry1;
                  bool hasNullKey1;
                  materializationContext1 = new MaterializationContext(
                      [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                      queryContext.Context
                  );
                  instance1 = default(Product);
                  entry1 = queryContext.TryGetEntry(
                      key: [LIFTABLE Constant: Key: Product.ProductId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindPrimaryKey()], 
                      keyValues: new object[]{ try { (object)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                      throwOnNullKey: True, 
                      hasNullKey: hasNullKey1);
                  !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                  {
                      entityType1 = entry1.EntityType;
                      return instance1 = (Product)entry1.Entity;
                  } : 
                  {
                      ISnapshot shadowSnapshot1;
                      shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                      entityType1 = [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")];
                      instance1 = switch (entityType1)
                      {
                          case [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]: 
                              {
                                  return 
                                  {
                                      Product instance;
                                      instance = new Product();
                                      instance.<ProductId>k__BackingField = try { dataReader.GetInt32(0) } catch (Exception) { ... } ;
                                      instance.<CategoryId>k__BackingField = try { dataReader.GetInt32(1) } catch (Exception) { ... } ;
                                      instance.<Cost>k__BackingField = try { dataReader.IsDBNull(2) ? default(decimal?) : (decimal?)Invoke(((CastingConverter<decimal, double>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Product.Cost (decimal?) | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindProperty("Cost")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetDouble(2)) } catch (Exception) { ... } ;
                                      instance.<Discontinued>k__BackingField = try { dataReader.GetBoolean(3) } catch (Exception) { ... } ;
                                      instance.<ProductName>k__BackingField = try { dataReader.GetString(4) } catch (Exception) { ... } ;
                                      instance.<Stock>k__BackingField = try { dataReader.IsDBNull(5) ? default(short?) : (short?)dataReader.GetInt16(5) } catch (Exception) { ... } ;
                                      (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                          context: materializationContext1.Context, 
                                          entity: instance, 
                                          queryTrackingBehavior: TrackAll, 
                                          structuralType: [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]) : default(void);
                                      return instance;
                                  }}
                          default: 
                              default(Product)
                      }
                      ;
                      entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                          entityType: entityType1, 
                          entity: instance1, 
                          snapshot: shadowSnapshot1);
                      return instance1;
                  } : default(void);
                  return instance1;
              };
              return entity;
          }, 
          contextType: Northwind.EntityModels.NorthwindDb, 
          standAloneStateManager: False, 
          detailedErrorsEnabled: True, 
          threadSafetyChecksEnabled: True)'
dbug: 12/14/2024 11:07:31.357 CoreEventId.QueryCompilationStarting[10111] (Microsoft.EntityFrameworkCore.Query) 
      Compiling query expression: 
      'DbSet<Product>()
          .Where(product => product.Cost > __price_0)
          .OrderByDescending(product => product.Cost)'
dbug: 12/14/2024 11:07:31.359 CoreEventId.QueryExecutionPlanned[10107] (Microsoft.EntityFrameworkCore.Query) 
      Generated query execution expression: 
      'queryContext => SingleQueryingEnumerable.Create<Product>(
          relationalQueryContext: (RelationalQueryContext)queryContext, 
          relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
              Projection Mapping:
                  EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Product.CategoryId (int) Required FK Index, 1], [Property: Product.Cost (decimal?), 2], [Property: Product.Discontinued (bool) Required, 3], [Property: Product.ProductName (string) Required MaxLength(40), 4], [Property: Product.Stock (short?), 5] }
              SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
              FROM Products AS p
              WHERE p.UnitPrice > @__price_0
              ORDER BY p.UnitPrice DESC) | Resolver: c => new RelationalCommandCache(
              c.Dependencies.MemoryCache, 
              c.RelationalDependencies.QuerySqlGeneratorFactory, 
              c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
              Projection Mapping:
                  EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Product.ProductId (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Product.CategoryId (int) Required FK Index, 1], [Property: Product.Cost (decimal?), 2], [Property: Product.Discontinued (bool) Required, 3], [Property: Product.ProductName (string) Required MaxLength(40), 4], [Property: Product.Stock (short?), 5] }
              SELECT p.ProductId, p.CategoryId, p.UnitPrice, p.Discontinued, p.ProductName, p.UnitsInStock
              FROM Products AS p
              WHERE p.UnitPrice > @__price_0
              ORDER BY p.UnitPrice DESC, 
              False, 
              new HashSet<string>(
                  new string[]{ }, 
                  StringComparer.Ordinal
              )
          )].GetRelationalCommandTemplate(parameters), 
          readerColumns: null, 
          shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
          {
              Product entity;
              entity = 
              {
                  MaterializationContext materializationContext1;
                  IEntityType entityType1;
                  Product instance1;
                  InternalEntityEntry entry1;
                  bool hasNullKey1;
                  materializationContext1 = new MaterializationContext(
                      [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                      queryContext.Context
                  );
                  instance1 = default(Product);
                  entry1 = queryContext.TryGetEntry(
                      key: [LIFTABLE Constant: Key: Product.ProductId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindPrimaryKey()], 
                      keyValues: new object[]{ try { (object)dataReader.GetInt32(0) } catch (Exception) { ... }  }, 
                      throwOnNullKey: True, 
                      hasNullKey: hasNullKey1);
                  !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                  {
                      entityType1 = entry1.EntityType;
                      return instance1 = (Product)entry1.Entity;
                  } : 
                  {
                      ISnapshot shadowSnapshot1;
                      shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                      entityType1 = [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")];
                      instance1 = switch (entityType1)
                      {
                          case [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]: 
                              {
                                  return 
                                  {
                                      Product instance;
                                      instance = new Product();
                                      instance.<ProductId>k__BackingField = try { dataReader.GetInt32(0) } catch (Exception) { ... } ;
                                      instance.<CategoryId>k__BackingField = try { dataReader.GetInt32(1) } catch (Exception) { ... } ;
                                      instance.<Cost>k__BackingField = try { dataReader.IsDBNull(2) ? default(decimal?) : (decimal?)Invoke(((CastingConverter<decimal, double>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Product.Cost (decimal?) | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product").FindProperty("Cost")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetDouble(2)) } catch (Exception) { ... } ;
                                      instance.<Discontinued>k__BackingField = try { dataReader.GetBoolean(3) } catch (Exception) { ... } ;
                                      instance.<ProductName>k__BackingField = try { dataReader.GetString(4) } catch (Exception) { ... } ;
                                      instance.<Stock>k__BackingField = try { dataReader.IsDBNull(5) ? default(short?) : (short?)dataReader.GetInt16(5) } catch (Exception) { ... } ;
                                      (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                          context: materializationContext1.Context, 
                                          entity: instance, 
                                          queryTrackingBehavior: TrackAll, 
                                          structuralType: [LIFTABLE Constant: EntityType: Product | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("Northwind.EntityModels.Product")]) : default(void);
                                      return instance;
                                  }}
                          default: 
                              default(Product)
                      }
                      ;
                      entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                          entityType: entityType1, 
                          entity: instance1, 
                          snapshot: shadowSnapshot1);
                      return instance1;
                  } : default(void);
                  return instance1;
              };
              return entity;
          }, 
          contextType: Northwind.EntityModels.NorthwindDb, 
          standAloneStateManager: False, 
          detailedErrorsEnabled: True, 
          threadSafetyChecksEnabled: True)'
dbug: 12/14/2024 11:07:31.361 RelationalEventId.ConnectionOpening[20000] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opening connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.361 RelationalEventId.ConnectionOpened[20001] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opened connection to database 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.361 RelationalEventId.CommandCreating[20103] (Microsoft.EntityFrameworkCore.Database.Command) 
      Creating DbCommand for 'ExecuteReader'.
dbug: 12/14/2024 11:07:31.361 RelationalEventId.CommandCreated[20104] (Microsoft.EntityFrameworkCore.Database.Command) 
      Created DbCommand for 'ExecuteReader' (0ms).
dbug: 12/14/2024 11:07:31.361 RelationalEventId.CommandInitialized[20106] (Microsoft.EntityFrameworkCore.Database.Command) 
      Initialized DbCommand for 'ExecuteReader' (0ms).
dbug: 12/14/2024 11:07:31.361 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executing DbCommand [Parameters=[@__price_0='100' (Nullable = true)], CommandType='Text', CommandTimeout='30']
      SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"
      FROM "Products" AS "p"
      WHERE "p"."UnitPrice" > @__price_0
      ORDER BY "p"."UnitPrice" DESC
info: 12/14/2024 11:07:31.361 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (0ms) [Parameters=[@__price_0='100' (Nullable = true)], CommandType='Text', CommandTimeout='30']
      SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"
      FROM "Products" AS "p"
      WHERE "p"."UnitPrice" > @__price_0
      ORDER BY "p"."UnitPrice" DESC
dbug: 12/14/2024 11:07:31.361 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 38}'.
dbug: 12/14/2024 11:07:31.362 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      Context 'NorthwindDb' started tracking 'Product' entity with key '{ProductId: 29}'.
dbug: 12/14/2024 11:07:31.362 RelationalEventId.DataReaderClosing[20301] (Microsoft.EntityFrameworkCore.Database.Command) 
      Closing data reader to 'main' on server 'D:\development\learn-c#\cs10dotnet6-exercises\ch10\EFCore\Northwind.db'.
dbug: 12/14/2024 11:07:31.362 RelationalEventId.DataReaderDisposing[20300] (Microsoft.EntityFramewor